
- name: Set up the local environment for full control of Docker using Ansible
  hosts: control_node
  connection: local
  tasks:
    - name: Register architecture
      become: true
      ansible.builtin.command:
        cmd: '/bin/bash -c "echo $(dpkg --print-architecture)"'
      register: arch
    - name: Ensure Docker daemon dependencies are installed for rootless.
      become: true
      ansible.builtin.package:
        name:
         - "uidmap"
         - "dbus-user-session"
         - "fuse-overlayfs"
         - "slirp4netns"
        state: present
    - name: Add Docker apt key
      become: true
      ansible.builtin.apt_key:
        url: "https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg"
    - name: Add Docker apt repository
      become: true
      ansible.builtin.apt_repository:
        repo: "deb [arch={{ arch.stdout }}] https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable"
        filename: docker
    - name: Install Docker from the official repo
      become: true
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: true
    - name: Disable the root-level docker daemon.
      become: true
      ansible.builtin.service:
        name: docker
        state: stopped
        enabled: false
    - name: Remove root-level docker socket
      become: true
      ansible.builtin.file:
        path: /var/run/docker.sock
        state: absent
    - name: Check user docker service
      ansible.builtin.stat:
        path: "/home/{{ ansible_user_id }}/.config/systemd/user/docker.service"
      register: dckservice
    - name: Run docker rootless set-up if needed
      ansible.builtin.command:
        cmd: "/bin/bash /usr/bin/dockerd-rootless-setuptool.sh install"
      when: not dckservice.stat.exists
    - name: Start Docker service as current user
      ansible.builtin.systemd_service:
        name: docker
        state: started
        enabled: true
        scope: user
    - name: 'Add export for DOCKER_HOST to .bashrc'
      ansible.builtin.lineinfile:
        path: /home/{{ ansible_user_id }}/.bashrc
        line: export DOCKER_HOST={{ lookup('env', 'XDG_RUNTIME_DIR') }}/docker.sock
        create: yes

#    - name: Register username running the Playbook as a variable
#      set_fact:
#        player_username: "{{ ansible_user_id }}"
#    - debug: var=player_username
#    - name: Set owner of /var/run/docker.sock to current user (hacky chown instead of docker group)
#      become: true
#      ansible.builtin.file:
#        owner: "{{ player_username }}"
#        path: "/var/run/docker.sock"
